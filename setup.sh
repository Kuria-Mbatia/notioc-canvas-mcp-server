#!/bin/bash

# Notioc Canvas MCP Server - Production Setup Script
# This script helps set up the MCP server for Claude Desktop integration

set -e  # Exit on any error

echo "üöÄ Notioc Canvas MCP Server - Production Setup"
echo "=============================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Error: Please run this script from the notioc-canvas-mcp-server directory${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Running from correct directory${NC}"

# Function to prompt for input with validation
prompt_for_input() {
    local prompt="$1"
    local var_name="$2"
    local validation_regex="$3"
    local error_message="$4"
    
    while true; do
        echo -e "${BLUE}$prompt${NC}"
        read -r input
        
        if [[ $input =~ $validation_regex ]]; then
            eval "$var_name='$input'"
            break
        else
            echo -e "${RED}$error_message${NC}"
        fi
    done
}

# Step 1: Install dependencies and build
echo -e "${YELLOW}üì¶ Step 1: Installing dependencies and building...${NC}"
npm install
npm run build

if [ ! -f "dist/src/server.js" ]; then
    echo -e "${RED}‚ùå Build failed - dist/src/server.js not found${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Build completed successfully${NC}"
echo ""

# Step 2: Environment configuration
echo -e "${YELLOW}üîß Step 2: Environment Configuration${NC}"

# Check if .env already exists
if [ -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  .env file already exists${NC}"
    echo "Do you want to:"
    echo "1) Keep existing .env file"
    echo "2) Reconfigure .env file"
    read -p "Enter choice (1 or 2): " choice
    
    if [ "$choice" = "2" ]; then
        rm .env
        configure_env=true
    else
        configure_env=false
    fi
else
    configure_env=true
fi

if [ "$configure_env" = true ]; then
    echo "Setting up environment variables..."
    
    # Canvas Base URL
    prompt_for_input \
        "Enter your Canvas instance URL (e.g., https://university.instructure.com):" \
        "canvas_url" \
        "^https://.*\.instructure\.com/?$" \
        "Please enter a valid Canvas URL (must start with https:// and end with .instructure.com)"
    
    # Remove trailing slash if present
    canvas_url=${canvas_url%/}
    
    # Canvas Access Token
    prompt_for_input \
        "Enter your Canvas API token:" \
        "canvas_token" \
        "^[0-9]+~[A-Za-z0-9]+$" \
        "Please enter a valid Canvas API token (format: number~letters)"
    
    # LlamaParse API Key
    echo -e "${BLUE}Enter your LlamaParse API key (leave empty to skip):${NC}"
    read -r llama_key
    
    # Create .env file
    cat > .env << EOF
# Notioc Canvas MCP Server Configuration
# Generated by setup script on $(date)

# Canvas API Configuration (REQUIRED)
CANVAS_BASE_URL=$canvas_url
CANVAS_ACCESS_TOKEN=$canvas_token

# LlamaParse API Configuration (OPTIONAL - for document extraction)
EOF
    
    if [ -n "$llama_key" ]; then
        echo "LLAMA_CLOUD_API_KEY=$llama_key" >> .env
    else
        echo "# LLAMA_CLOUD_API_KEY=your_llama_cloud_api_key_here" >> .env
    fi
    
    echo "" >> .env
    echo "# Development settings" >> .env
    echo "NODE_ENV=production" >> .env
    echo "DEBUG=false" >> .env
    
    echo -e "${GREEN}‚úÖ .env file created successfully${NC}"
fi

# Step 3: Test the server
echo -e "${YELLOW}üß™ Step 3: Testing MCP server...${NC}"

# Test server response
if echo '{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}' | node dist/src/server.js | grep -q "getting courses"; then
    echo -e "${GREEN}‚úÖ MCP server test successful${NC}"
else
    echo -e "${RED}‚ùå MCP server test failed${NC}"
    echo "Please check your Canvas credentials and try again."
    exit 1
fi

# Step 4: Claude Desktop configuration
echo ""
echo -e "${YELLOW}‚öôÔ∏è  Step 4: Claude Desktop Configuration${NC}"

# Get absolute path
PROJECT_PATH=$(pwd)

# Detect OS and Claude config path
case "$(uname -s)" in
    Darwin*)    # macOS
        CLAUDE_CONFIG_PATH="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
        ;;
    Linux*)     # Linux
        CLAUDE_CONFIG_PATH="$HOME/.config/Claude/claude_desktop_config.json"
        ;;
    CYGWIN*|MINGW*|MSYS*)    # Windows
        CLAUDE_CONFIG_PATH="$APPDATA/Claude/claude_desktop_config.json"
        ;;
    *)
        echo -e "${RED}‚ùå Unsupported operating system${NC}"
        exit 1
        ;;
esac

echo "Claude Desktop config file location: $CLAUDE_CONFIG_PATH"

# Create Claude config directory if it doesn't exist
CLAUDE_CONFIG_DIR=$(dirname "$CLAUDE_CONFIG_PATH")
if [ ! -d "$CLAUDE_CONFIG_DIR" ]; then
    echo "Creating Claude config directory..."
    mkdir -p "$CLAUDE_CONFIG_DIR"
fi

# Generate Claude config
echo "Do you want to:"
echo "1) Use .env file for credentials (More Secure - Recommended)"
echo "2) Put credentials directly in Claude config (Less Secure)"
read -p "Enter choice (1 or 2): " config_choice

if [ "$config_choice" = "1" ]; then
    # Secure option - use .env file
    CLAUDE_CONFIG=$(cat << EOF
{
  "mcpServers": {
    "notioc-canvas": {
      "command": "node",
      "args": ["$PROJECT_PATH/dist/src/server.js"],
      "cwd": "$PROJECT_PATH"
    }
  }
}
EOF
)
else
    # Load from .env file for the config
    source .env
    CLAUDE_CONFIG=$(cat << EOF
{
  "mcpServers": {
    "notioc-canvas": {
      "command": "node",
      "args": ["$PROJECT_PATH/dist/src/server.js"],
      "cwd": "$PROJECT_PATH",
      "env": {
        "CANVAS_BASE_URL": "$CANVAS_BASE_URL",
        "CANVAS_ACCESS_TOKEN": "$CANVAS_ACCESS_TOKEN"$([ -n "$LLAMA_CLOUD_API_KEY" ] && echo ",
        \"LLAMA_CLOUD_API_KEY\": \"$LLAMA_CLOUD_API_KEY\"")
      }
    }
  }
}
EOF
)
fi

# Backup existing config if it exists
if [ -f "$CLAUDE_CONFIG_PATH" ]; then
    echo "Backing up existing Claude config..."
    cp "$CLAUDE_CONFIG_PATH" "${CLAUDE_CONFIG_PATH}.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Write new config
echo "$CLAUDE_CONFIG" > "$CLAUDE_CONFIG_PATH"
echo -e "${GREEN}‚úÖ Claude Desktop configuration updated${NC}"

# Step 5: Final instructions
echo ""
echo -e "${GREEN}üéâ Setup Complete!${NC}"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo "1. ${BLUE}Restart Claude Desktop completely${NC}"
echo "   - Close Claude Desktop entirely"
echo "   - Reopen Claude Desktop"
echo "   - Wait 10-15 seconds for initialization"
echo ""
echo "2. ${BLUE}Test the integration${NC}"
echo "   Ask Claude: 'What Canvas courses am I enrolled in?'"
echo ""
echo "3. ${BLUE}If you encounter issues:${NC}"
echo "   - Check logs: tail -f ~/Library/Logs/Claude/mcp-server-notioc-canvas.log"
echo "   - Review troubleshooting section in README.md"
echo ""
echo -e "${GREEN}Happy learning with your Canvas MCP server! üéì‚ú®${NC}"
