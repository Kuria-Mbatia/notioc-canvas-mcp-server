#!/bin/bash

# Notioc Canvas MCP Server - Production Setup Script
# This script helps set up the MCP server for Claude Desktop integration

set -e  # Exit on any error

echo "üöÄ Notioc Canvas MCP Server - Production Setup"
echo "=============================================="
echo ""
echo -e "${BLUE}üì± First time using Terminal?${NC}"
echo "No worries! Just follow along - we'll guide you through everything."
echo "You can copy and paste commands, and we'll explain each step."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Pre-flight system checks
echo -e "${YELLOW}üîç Step 0: System Requirements Check${NC}"

# Check Node.js version
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js is not installed${NC}"
    echo "Please install Node.js from https://nodejs.org/ (version 18 or higher)"
    exit 1
fi

NODE_VERSION=$(node --version | sed 's/v//')
MIN_VERSION="18.0.0"
if [ "$(printf '%s\n' "$MIN_VERSION" "$NODE_VERSION" | sort -V | head -n1)" != "$MIN_VERSION" ]; then
    echo -e "${RED}‚ùå Node.js version $NODE_VERSION is too old (minimum: $MIN_VERSION)${NC}"
    echo "Please update Node.js from https://nodejs.org/"
    exit 1
fi

echo -e "${GREEN}‚úÖ Node.js version $NODE_VERSION (compatible)${NC}"

# Check npm
if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm is not available${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ npm is available${NC}"

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Error: Please run this script from the notioc-canvas-mcp-server directory${NC}"
    echo "Current directory: $(pwd)"
    echo "Make sure you've downloaded and extracted the project files first."
    exit 1
fi

echo -e "${GREEN}‚úÖ Running from correct directory${NC}"
echo ""

# Function to prompt for input with validation
prompt_for_input() {
    local prompt="$1"
    local var_name="$2"
    local validation_regex="$3"
    local error_message="$4"
    
    while true; do
        echo -e "${BLUE}$prompt${NC}"
        read -r input
        
        if [[ $input =~ $validation_regex ]]; then
            eval "$var_name='$input'"
            break
        else
            echo -e "${RED}$error_message${NC}"
        fi
    done
}

# Function to show Canvas API token instructions
show_canvas_instructions() {
    echo -e "${BLUE}üìã How to get your Canvas API Token:${NC}"
    echo ""
    echo -e "${YELLOW}üéì Need visual help? Check our documentation:${NC}"
    echo "   ‚Ä¢ README.md has screenshots and step-by-step guides"
    echo "   ‚Ä¢ Look for the 'Canvas API Token Setup' section"
    echo ""
    echo "Step-by-step instructions:"
    echo "1. Log in to your Canvas account"
    echo "2. Go to Account ‚Üí Settings"
    echo "3. Scroll down to 'Approved Integrations'"
    echo "4. Click '+ New Access Token'"
    echo "5. Enter a purpose (e.g., 'Claude MCP Integration')"
    echo "6. Click 'Generate Token'"
    echo "7. Copy the token (starts with a number, then ~, then letters)"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Important: You need Canvas admin/teacher permissions to create API tokens${NC}"
    echo "   If you're a student, ask your IT department or instructor for help."
    echo ""
}

# Step 1: Install dependencies and build
echo -e "${YELLOW}üì¶ Step 1: Installing dependencies and building...${NC}"
npm install
npm run build

if [ ! -f "dist/src/server.js" ]; then
    echo -e "${RED}‚ùå Build failed - dist/src/server.js not found${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Build completed successfully${NC}"
echo ""

# Step 2: Environment configuration
echo -e "${YELLOW}üîß Step 2: Environment Configuration${NC}"

# Check if .env already exists
if [ -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  .env file already exists${NC}"
    echo "Do you want to:"
    echo "1) Keep existing .env file"
    echo "2) Reconfigure .env file"
    read -p "Enter choice (1 or 2): " choice
    
    if [ "$choice" = "2" ]; then
        rm .env
        configure_env=true
    else
        configure_env=false
    fi
else
    configure_env=true
fi

if [ "$configure_env" = true ]; then
    echo "Setting up environment variables..."
    echo ""
    echo -e "${BLUE}üîß We need two pieces of information from Canvas:${NC}"
    echo "1. Your Canvas website URL"
    echo "2. Your Canvas API token (like a password for programs)"
    echo ""
    
    # Show Canvas instructions first
    show_canvas_instructions
    
    # Canvas Base URL
    prompt_for_input \
        "Enter your Canvas instance URL (e.g., https://university.instructure.com):" \
        "canvas_url" \
        "^https://.*\.instructure\.com/?$" \
        "Please enter a valid Canvas URL (must start with https:// and end with .instructure.com)"
    
    # Remove trailing slash if present
    canvas_url=${canvas_url%/}
    
    # Canvas Access Token
    prompt_for_input \
        "Enter your Canvas API token:" \
        "canvas_token" \
        "^[0-9]+~[A-Za-z0-9]+$" \
        "Please enter a valid Canvas API token (format: number~letters)"
    
    # LlamaParse API Key
    echo -e "${BLUE}Enter your LlamaParse API key (leave empty to skip):${NC}"
    read -r llama_key
    
    # Create .env file
    cat > .env << EOF
# Notioc Canvas MCP Server Configuration
# Generated by setup script on $(date)

# Canvas API Configuration (REQUIRED)
CANVAS_BASE_URL=$canvas_url
CANVAS_ACCESS_TOKEN=$canvas_token

# LlamaParse API Configuration (OPTIONAL - for document extraction)
EOF
    
    if [ -n "$llama_key" ]; then
        echo "LLAMA_CLOUD_API_KEY=$llama_key" >> .env
    else
        echo "# LLAMA_CLOUD_API_KEY=your_llama_cloud_api_key_here" >> .env
    fi
    
    echo "" >> .env
    echo "# Development settings" >> .env
    echo "NODE_ENV=production" >> .env
    echo "DEBUG=false" >> .env
    
    echo -e "${GREEN}‚úÖ .env file created successfully${NC}"
fi

# Step 3: Test the server
echo -e "${YELLOW}üß™ Step 3: Testing MCP server...${NC}"
echo "   Testing server build and Canvas API connection..."

# Test server response
TEST_OUTPUT=$(echo '{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}' | node dist/src/server.js 2>&1)
if echo "$TEST_OUTPUT" | grep -q "get_courses"; then
    echo -e "${GREEN}‚úÖ MCP server test successful${NC}"
    echo "   Found all 8 Canvas tools available"
else
    echo -e "${RED}‚ùå MCP server test failed${NC}"
    echo ""
    echo -e "${YELLOW}üîç Troubleshooting Information:${NC}"
    echo "Server output:"
    echo "$TEST_OUTPUT"
    echo ""
    echo -e "${BLUE}Common issues:${NC}"
    echo "‚Ä¢ Check Canvas URL (should not end with /)"
    echo "‚Ä¢ Verify Canvas API token is correct and not expired"
    echo "‚Ä¢ Ensure you have Canvas course access"
    echo "‚Ä¢ Token should have format: 12345~AbC123XyZ..."
    echo ""
    echo "Please check your Canvas credentials and try again."
    exit 1
fi

# Step 4: Claude Desktop configuration
echo ""
echo -e "${YELLOW}‚öôÔ∏è  Step 4: Claude Desktop Configuration${NC}"

# Get absolute path
PROJECT_PATH=$(pwd)

# Function to find Claude Desktop config location
find_claude_config() {
    local potential_paths=()
    
    # Detect OS and add potential paths
    case "$(uname -s)" in
        Darwin*)    # macOS
            potential_paths+=(
                "$HOME/Library/Application Support/Claude/claude_desktop_config.json"
                "$HOME/Library/Application Support/Anthropic/claude/claude_desktop_config.json"
            )
            ;;
        Linux*)     # Linux
            potential_paths+=(
                "$HOME/.config/Claude/claude_desktop_config.json"
                "$HOME/.config/Anthropic/claude/claude_desktop_config.json"
                "$HOME/.local/share/Claude/claude_desktop_config.json"
            )
            ;;
        CYGWIN*|MINGW*|MSYS*)    # Windows
            potential_paths+=(
                "$APPDATA/Claude/claude_desktop_config.json"
                "$APPDATA/Anthropic/claude/claude_desktop_config.json"
                "$LOCALAPPDATA/Claude/claude_desktop_config.json"
            )
            ;;
        *)
            echo -e "${RED}‚ùå Unsupported operating system: $(uname -s)${NC}"
            echo "Please manually configure Claude Desktop using the instructions in README.md"
            exit 1
            ;;
    esac
    
    # Check if any config file already exists
    for path in "${potential_paths[@]}"; do
        if [ -f "$path" ]; then
            echo "$path"
            return 0
        fi
    done
    
    # If no existing config found, check for directories and use the first valid one
    for path in "${potential_paths[@]}"; do
        local dir=$(dirname "$path")
        if [ -d "$dir" ] || mkdir -p "$dir" 2>/dev/null; then
            echo "$path"
            return 0
        fi
    done
    
    # Fallback to first path if we can't create any
    echo "${potential_paths[0]}"
}

# Find Claude config path
CLAUDE_CONFIG_PATH=$(find_claude_config)
echo -e "${BLUE}üîç Claude Desktop config location:${NC} $CLAUDE_CONFIG_PATH"

# Verify or create the config directory
CLAUDE_CONFIG_DIR=$(dirname "$CLAUDE_CONFIG_PATH")
if [ ! -d "$CLAUDE_CONFIG_DIR" ]; then
    echo -e "${YELLOW}üìÅ Creating Claude config directory...${NC}"
    if mkdir -p "$CLAUDE_CONFIG_DIR" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Directory created successfully${NC}"
    else
        echo -e "${RED}‚ùå Failed to create directory: $CLAUDE_CONFIG_DIR${NC}"
        echo ""
        echo -e "${BLUE}üí° Troubleshooting:${NC}"
        echo "‚Ä¢ Check if Claude Desktop is installed"
        echo "‚Ä¢ Try running Claude Desktop once to create config directories"
        echo "‚Ä¢ Check file permissions in your home directory"
        echo ""
        echo "Manual setup instructions:"
        echo "1. Create directory: mkdir -p \"$CLAUDE_CONFIG_DIR\""
        echo "2. Create config file manually using README.md instructions"
        exit 1
    fi
fi

# Generate Claude config
echo "Do you want to:"
echo "1) Use .env file for credentials (More Secure - Recommended)"
echo "2) Put credentials directly in Claude config (Less Secure)"
read -p "Enter choice (1 or 2): " config_choice

if [ "$config_choice" = "1" ]; then
    # Secure option - use .env file
    CLAUDE_CONFIG=$(cat << EOF
{
  "mcpServers": {
    "notioc-canvas": {
      "command": "node",
      "args": ["$PROJECT_PATH/dist/src/server.js"],
      "cwd": "$PROJECT_PATH"
    }
  }
}
EOF
)
else
    # Load from .env file for the config
    source .env
    CLAUDE_CONFIG=$(cat << EOF
{
  "mcpServers": {
    "notioc-canvas": {
      "command": "node",
      "args": ["$PROJECT_PATH/dist/src/server.js"],
      "cwd": "$PROJECT_PATH",
      "env": {
        "CANVAS_BASE_URL": "$CANVAS_BASE_URL",
        "CANVAS_ACCESS_TOKEN": "$CANVAS_ACCESS_TOKEN"$([ -n "$LLAMA_CLOUD_API_KEY" ] && echo ",
        \"LLAMA_CLOUD_API_KEY\": \"$LLAMA_CLOUD_API_KEY\"")
      }
    }
  }
}
EOF
)
fi

# Backup existing config if it exists
if [ -f "$CLAUDE_CONFIG_PATH" ]; then
    echo "Backing up existing Claude config..."
    cp "$CLAUDE_CONFIG_PATH" "${CLAUDE_CONFIG_PATH}.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Write new config
echo "$CLAUDE_CONFIG" > "$CLAUDE_CONFIG_PATH"
echo -e "${GREEN}‚úÖ Claude Desktop configuration updated${NC}"

# Step 5: Final instructions and troubleshooting
echo ""
echo -e "${GREEN}üéâ Setup Complete!${NC}"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo "1. ${BLUE}Restart Claude Desktop completely${NC}"
echo "   - Close Claude Desktop entirely (‚åò+Q on Mac)"
echo "   - Wait 5 seconds"
echo "   - Reopen Claude Desktop"
echo "   - Wait 10-15 seconds for MCP servers to initialize"
echo ""
echo "2. ${BLUE}Test the integration${NC}"
echo "   Try asking Claude: 'What Canvas courses am I enrolled in?'"
echo "   Or: 'Show me my assignments'"
echo ""
echo "3. ${BLUE}Configuration Summary:${NC}"
echo "   ‚Ä¢ MCP Server: $PROJECT_PATH/dist/src/server.js"
echo "   ‚Ä¢ Config file: $CLAUDE_CONFIG_PATH"
echo "   ‚Ä¢ Environment: $([ -f ".env" ] && echo ".env file" || echo "embedded credentials")"
echo ""
echo "4. ${BLUE}If you encounter issues:${NC}"
echo ""
echo "   ${YELLOW}üîç Common Problems & Solutions:${NC}"
echo "   ‚Ä¢ Claude doesn't see Canvas tools:"
echo "     ‚Üí Restart Claude Desktop completely"
echo "     ‚Üí Check config file exists: ls -la \"$CLAUDE_CONFIG_PATH\""
echo "     ‚Üí Verify JSON syntax is valid"
echo ""
echo "   ‚Ä¢ 'Canvas API error' messages:"
echo "     ‚Üí Check Canvas URL and token in .env file"
echo "     ‚Üí Test with: curl -H \"Authorization: Bearer \$CANVAS_ACCESS_TOKEN\" \"\$CANVAS_BASE_URL/api/v1/courses\""
echo "     ‚Üí Ensure token has proper permissions"
echo ""
echo "   ‚Ä¢ 'Permission denied' errors:"
echo "     ‚Üí Check file permissions: ls -la $PROJECT_PATH/dist/src/server.js"
echo "     ‚Üí Ensure Claude can access the project directory"
echo ""
echo "   ${YELLOW}üìä Debug Commands:${NC}"
echo "   ‚Ä¢ Test MCP server: echo '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\"}' | node dist/src/server.js"
echo "   ‚Ä¢ Check logs: tail -f ~/Library/Logs/Claude/mcp-server-notioc-canvas.log"
echo "   ‚Ä¢ Verify Canvas API: ./verify.sh"
echo ""
echo "   ${YELLOW}üìö Additional Help:${NC}"
echo "   ‚Ä¢ Full documentation: README.md"
echo "   ‚Ä¢ Troubleshooting guide: README.md (Troubleshooting section)"
echo "   ‚Ä¢ Report issues: https://github.com/notioc/canvas-mcp-server/issues"
echo ""
echo -e "${GREEN}Happy learning with your Canvas MCP server! üéì‚ú®${NC}"
